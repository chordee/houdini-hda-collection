
import json

class ShaderListFile:
        def __init__(self, file = '', indent = False):
                self.shaderList = {}
                self.__file = file
                self.__indent = indent

        def getObjs(self):
                return self.shaderList.keys()

        def getShaderList(self):
                return self.shaderList

        def setFile(self, file):
                self.__file = file

        def write(self):
                with open(self.__file, 'w') as file:
                        json.dump(self.shaderList, file, sort_keys=True, indent = self.__indent)

        def read(self):
                with open(self.__file, 'r') as file:
                        self.shaderList = json.load(file)

        def append(self, obj, shader, indices):
                self.shaderList[obj] = [shader, indices]

        def remove(self, obj):
                del self.shaderList[obj]

        def backwardObj(self, step):
                objs = self.shaderList.keys()
                for obj in objs:
                        temp_name = obj.split('/')
                        fixed_name = ""
                        if len(temp_name) < (step+1):
                                fixed_name = '/' + temp_name[-1]
                        else:
                                fixed_name = '/' + "/".join(temp_name[step:])

                        self.shaderList[fixed_name] = self.shaderList[obj]
                        del self.shaderList[obj]

        def removeObjsNamespace(self, nspace = ''):
                objs = self.shaderList.keys()
                for obj in objs:
                        fixed_name = self.__removeObjNamespace(obj, ns = nspace)
                        self.shaderList[fixed_name] = self.shaderList[obj]
                        del self.shaderList[obj]

        def removeObjNamespace(self, target_obj, nspace = ''):
                objs = self.shaderList.keys()
                for obj in objs:
                        if obj == target_obj:
                                fixed_name = self.__removeObjNamespace(obj, ns = nspace)
                                self.shaderList[fixed_name] = self.shaderList[obj]
                                del self.shaderList[obj]

        def removeShadersNamespace(self):
                objs = self.shaderList.keys()
                for obj in objs:
                        shaders = self.shaderList[obj][0]
                        for i in range(len(shaders)):
                                self.shaderList[obj][0][i] = self.shaderList[obj][0][i].split(':')[-1]

        def removeShaderNamespace(self, shader):
                objs = self.shaderList.keys()
                for obj in objs:
                        shaders = self.shaderList[obj][0]
                        for i in range(len(shaders)):
                                if self.shaderList[obj][0][i] == shader:
                                        self.shaderList[obj][0][i] = self.shaderList[obj][0][i].split(':')[-1]

        def __removeObjNamespace(self, name, ns = ''):
                temp_name = name.split('/')
                fixed_name = []
                for name in temp_name:
                        if ns == '':
                                fixed_name.append(name.split(':')[-1])
                        else:
                                fixed_name.append(":".join([x for x in name.split(':') if x != ns]))
                fixed_name = '/'.join(fixed_name)

                return fixed_name

        def addNamespaceToShaders(self, ns):
                objs = self.shaderList.keys()
                for obj in objs:
                        for i in range(len(self.shaderList[obj][0])):
                                self.shaderList[obj][0][i] = ns+':'+self.shaderList[obj][0][i]

        def addNamespaceToShader(self, shader, ns):
                objs = self.shaderList.keys()
                for obj in objs:
                        for i in range(len(self.shaderList[obj][0])):
                                if self.shaderList[obj][0][i] == shader:
                                        self.shaderList[obj][0][i] = ns+':'+self.shaderList[obj][0][i]

        def addNamespaceToShaderFromObj(self, obj, ns):
                for i in range(len(self.shaderList[obj][0])):
                        self.shaderList[obj][0][i] = ns +':'+self.shaderList[obj][0][i]


def export():
    node = hou.pwd()
    path = hou.pwd().path()+'/OUT'
    target_node = hou.node(path)
    geo = target_node.geometry()
    
    f = node.parm('file').eval()
    attrib_name = node.parm('material_attrib').eval()
    dagpath = node.parm('dagpath').eval()

    groups = geo.primGroups()
    objs = []
    shaderlist = {}
    group_amount = len(groups)
    
    with hou.InterruptableOperation('ShaderList Generating...',open_interrupt_dialog = True) as dialog:

        now_group = 1
        
        for group in groups:
            shaders = []
            mat = []
            faces = []
            obj = group.prims()[0].attribValue(dagpath)
            objs.append(obj)
            for prim in group.prims():
                mat.append(prim.attribValue(attrib_name))
            shaders = list(set(mat))
            if len(shaders) == 1:
                faces = [-1]
            else:
                for i in range(len(mat)):
                    faces.append(shaders.index(mat[i]))
            shaderlist[obj] = [shaders, faces]
            now_group += 1
            dialog.updateProgress(float(now_group)/group_amount)
    
    out = ShaderListFile(file = f)
    out.shaderList = shaderlist
    out.write()
    
def export2():
    node = hou.pwd()
    path = hou.pwd().path()+'/OUT_FOREACH'
    target_node = hou.node(path)
    geo = target_node.geometry()
    
    f = node.parm('file').eval()
    attrib_name = node.parm('material_attrib').eval()
    dagpath = node.parm('dagpath').eval()

    groups = geo.primGroups()
    for group in groups:
        print group.options()
    objs = []
    shaderlist = {}
    print 'aaa'